/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.platzhaltr.util.date.lexer;

import java.io.*;
import com.platzhaltr.util.date.node.*;

@SuppressWarnings("nls")
public class Lexer
{
    protected Token token;
    protected State state = State.INITIAL;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    @SuppressWarnings("unused")
    protected void filter() throws LexerException, IOException
    {
        // Do nothing
    }

    public Lexer(@SuppressWarnings("hiding") PushbackReader in)
    {
        this.in = in;
    }
 
    public Token peek() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        return this.token;
    }

    public Token next() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        Token result = this.token;
        this.token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = this.pos;
        int start_line = this.line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        @SuppressWarnings("hiding") int[][][] gotoTable = Lexer.gotoTable[this.state.id()];
        @SuppressWarnings("hiding") int[] accept = Lexer.accept[this.state.id()];
        this.text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(this.cr)
                    {
                        this.cr = false;
                    }
                    else
                    {
                        this.line++;
                        this.pos = 0;
                    }
                    break;
                case 13:
                    this.line++;
                    this.pos = 0;
                    this.cr = true;
                    break;
                default:
                    this.pos++;
                    this.cr = false;
                    break;
                }

                this.text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = this.text.length();
                    accept_pos = this.pos;
                    accept_line = this.line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            @SuppressWarnings("hiding") Token token = new0(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            @SuppressWarnings("hiding") Token token = new1(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            @SuppressWarnings("hiding") Token token = new2(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            @SuppressWarnings("hiding") Token token = new3(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            @SuppressWarnings("hiding") Token token = new4(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            @SuppressWarnings("hiding") Token token = new5(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            @SuppressWarnings("hiding") Token token = new6(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            @SuppressWarnings("hiding") Token token = new7(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            @SuppressWarnings("hiding") Token token = new8(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            @SuppressWarnings("hiding") Token token = new9(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            @SuppressWarnings("hiding") Token token = new10(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            @SuppressWarnings("hiding") Token token = new11(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            @SuppressWarnings("hiding") Token token = new12(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            @SuppressWarnings("hiding") Token token = new13(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 14:
                        {
                            @SuppressWarnings("hiding") Token token = new14(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 15:
                        {
                            @SuppressWarnings("hiding") Token token = new15(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 16:
                        {
                            @SuppressWarnings("hiding") Token token = new16(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 17:
                        {
                            @SuppressWarnings("hiding") Token token = new17(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 18:
                        {
                            @SuppressWarnings("hiding") Token token = new18(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 19:
                        {
                            @SuppressWarnings("hiding") Token token = new19(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 20:
                        {
                            @SuppressWarnings("hiding") Token token = new20(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 21:
                        {
                            @SuppressWarnings("hiding") Token token = new21(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 22:
                        {
                            @SuppressWarnings("hiding") Token token = new22(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 23:
                        {
                            @SuppressWarnings("hiding") Token token = new23(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 24:
                        {
                            @SuppressWarnings("hiding") Token token = new24(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 25:
                        {
                            @SuppressWarnings("hiding") Token token = new25(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 26:
                        {
                            @SuppressWarnings("hiding") Token token = new26(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 27:
                        {
                            @SuppressWarnings("hiding") Token token = new27(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 28:
                        {
                            @SuppressWarnings("hiding") Token token = new28(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 29:
                        {
                            @SuppressWarnings("hiding") Token token = new29(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 30:
                        {
                            @SuppressWarnings("hiding") Token token = new30(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 31:
                        {
                            @SuppressWarnings("hiding") Token token = new31(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 32:
                        {
                            @SuppressWarnings("hiding") Token token = new32(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 33:
                        {
                            @SuppressWarnings("hiding") Token token = new33(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 34:
                        {
                            @SuppressWarnings("hiding") Token token = new34(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(this.text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + this.text);
                    }

                    @SuppressWarnings("hiding") EOF token = new EOF(
                        start_line + 1,
                        start_pos + 1);
                    return token;
                }
            }
        }
    }

    Token new0(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TNext(text, line, pos); }
    Token new1(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TMonday(text, line, pos); }
    Token new2(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTuesday(text, line, pos); }
    Token new3(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TWednesday(text, line, pos); }
    Token new4(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TThursday(text, line, pos); }
    Token new5(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TFriday(text, line, pos); }
    Token new6(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TSaturday(text, line, pos); }
    Token new7(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TSunday(text, line, pos); }
    Token new8(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TEvening(text, line, pos); }
    Token new9(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TWeekend(text, line, pos); }
    Token new10(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TWeek(text, line, pos); }
    Token new11(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TMonth(text, line, pos); }
    Token new12(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TYear(text, line, pos); }
    Token new13(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TEvery(text, line, pos); }
    Token new14(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TJanuary(text, line, pos); }
    Token new15(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TFebruary(text, line, pos); }
    Token new16(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TMarch(text, line, pos); }
    Token new17(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TApril(text, line, pos); }
    Token new18(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TMay(text, line, pos); }
    Token new19(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TJune(text, line, pos); }
    Token new20(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TJuly(text, line, pos); }
    Token new21(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TAugust(text, line, pos); }
    Token new22(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TSeptember(text, line, pos); }
    Token new23(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOctober(text, line, pos); }
    Token new24(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TNovember(text, line, pos); }
    Token new25(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDecember(text, line, pos); }
    Token new26(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDot(line, pos); }
    Token new27(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TColon(line, pos); }
    Token new28(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOn(text, line, pos); }
    Token new29(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIn(text, line, pos); }
    Token new30(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TAt(text, line, pos); }
    Token new31(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOclock(text, line, pos); }
    Token new32(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBlank(text, line, pos); }
    Token new33(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TSubject(text, line, pos); }
    Token new34(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TNumber(text, line, pos); }

    private int getChar() throws IOException
    {
        if(this.eof)
        {
            return -1;
        }

        int result = this.in.read();

        if(result == -1)
        {
            this.eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = this.text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            this.eof = false;

            this.in.unread(this.text.charAt(i));
        }
    }

    protected void unread(@SuppressWarnings("hiding") Token token) throws IOException
    {
        @SuppressWarnings("hiding") String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            this.eof = false;

            this.in.unread(text.charAt(i));
        }

        this.pos = token.getPos() - 1;
        this.line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(this.text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // INITIAL
            {{10, 10, 1}, {13, 13, 2}, {32, 32, 3}, {46, 46, 4}, {48, 57, 5}, {58, 58, 6}, {65, 65, 7}, {66, 67, 8}, {68, 68, 9}, {69, 69, 8}, {70, 70, 10}, {71, 72, 8}, {73, 73, 11}, {74, 74, 12}, {75, 76, 8}, {77, 77, 13}, {78, 78, 14}, {79, 79, 15}, {80, 82, 8}, {83, 83, 16}, {84, 84, 8}, {85, 85, 17}, {86, 86, 8}, {87, 87, 18}, {88, 90, 8}, {97, 97, 19}, {98, 99, 8}, {100, 100, 20}, {101, 101, 8}, {102, 102, 21}, {103, 104, 8}, {105, 105, 22}, {106, 106, 23}, {107, 108, 8}, {109, 109, 24}, {110, 110, 25}, {111, 111, 26}, {112, 114, 8}, {115, 115, 27}, {116, 116, 8}, {117, 117, 28}, {118, 118, 8}, {119, 119, 29}, {120, 122, 8}, },
            {{10, 32, -2}, },
            {{10, 32, -2}, },
            {{10, 32, -2}, },
            {},
            {{48, 57, 5}, },
            {},
            {{65, 90, 8}, {97, 97, 8}, {98, 98, 30}, {99, 108, 8}, {109, 109, 31}, {110, 111, 8}, {112, 112, 32}, {113, 116, 8}, {117, 117, 33}, {118, 122, 8}, },
            {{65, 90, 8}, {97, 122, 8}, },
            {{65, 90, 8}, {97, 100, 8}, {101, 101, 34}, {102, 104, 8}, {105, 105, 35}, {106, 110, 8}, {111, 111, 36}, {112, 122, 8}, },
            {{65, 100, -11}, {101, 101, 37}, {102, 113, 8}, {114, 114, 38}, {115, 122, 8}, },
            {{65, 90, 8}, {97, 109, 8}, {110, 110, 39}, {111, 122, 8}, },
            {{65, 90, 8}, {97, 97, 40}, {98, 100, 8}, {101, 101, 41}, {102, 116, 8}, {117, 117, 42}, {118, 122, 8}, },
            {{65, 90, 8}, {97, 97, 43}, {98, 104, 8}, {105, 105, 44}, {106, 110, 8}, {111, 111, 45}, {112, 122, 8}, {8730, 8730, 46}, },
            {{65, 90, 8}, {97, 110, 8}, {111, 111, 47}, {112, 122, 8}, {8730, 8730, 48}, },
            {{65, 90, 8}, {97, 106, 8}, {107, 107, 49}, {108, 122, 8}, },
            {{65, 90, 8}, {97, 97, 50}, {98, 100, 8}, {101, 101, 51}, {102, 110, 8}, {111, 111, 52}, {112, 122, 8}, },
            {{65, 90, 8}, {97, 103, 8}, {104, 104, 53}, {105, 122, 8}, },
            {{65, 68, 8}, {69, 69, 54}, {70, 90, 8}, {97, 100, 8}, {101, 101, 55}, {102, 110, 8}, {111, 111, 56}, {112, 122, 8}, },
            {{65, 97, -9}, {98, 98, 57}, {99, 108, 8}, {109, 109, 58}, {110, 111, 8}, {112, 112, 59}, {113, 116, 8}, {117, 117, 60}, {118, 122, 8}, },
            {{65, 100, -11}, {101, 101, 61}, {102, 104, 8}, {105, 105, 62}, {106, 110, 8}, {111, 111, 63}, {112, 122, 8}, },
            {{65, 100, -11}, {101, 101, 64}, {102, 113, 8}, {114, 114, 65}, {115, 122, 8}, },
            {{65, 109, -13}, {110, 110, 66}, {111, 122, 8}, },
            {{65, 90, 8}, {97, 97, 67}, {98, 100, 8}, {101, 101, 68}, {102, 116, 8}, {117, 117, 69}, {118, 122, 8}, },
            {{65, 90, 8}, {97, 97, 70}, {98, 104, 8}, {105, 105, 71}, {106, 110, 8}, {111, 111, 72}, {112, 122, 8}, {8730, 8730, 73}, },
            {{65, 110, -16}, {111, 111, 74}, {112, 122, 8}, {8730, 8730, 75}, },
            {{65, 106, -17}, {107, 107, 76}, {108, 122, 8}, },
            {{65, 90, 8}, {97, 97, 77}, {98, 100, 8}, {101, 101, 78}, {102, 110, 8}, {111, 111, 79}, {112, 122, 8}, },
            {{65, 103, -19}, {104, 104, 80}, {105, 108, 8}, {109, 109, 81}, {110, 122, 8}, },
            {{65, 100, -11}, {101, 101, 82}, {102, 110, 8}, {111, 111, 83}, {112, 122, 8}, },
            {{65, 100, -11}, {101, 101, 84}, {102, 122, 8}, },
            {{65, 122, -10}, },
            {{65, 90, 8}, {97, 113, 8}, {114, 114, 85}, {115, 122, 8}, },
            {{65, 90, 8}, {97, 102, 8}, {103, 103, 86}, {104, 122, 8}, },
            {{65, 90, 8}, {97, 121, 8}, {122, 122, 87}, },
            {{65, 100, -11}, {101, 101, 88}, {102, 122, 8}, },
            {{65, 109, -13}, {110, 110, 89}, {111, 122, 8}, },
            {{65, 97, -9}, {98, 98, 90}, {99, 122, 8}, },
            {{65, 100, -11}, {101, 101, 91}, {102, 122, 8}, },
            {{65, 122, -10}, },
            {{65, 103, -19}, {104, 104, 92}, {105, 109, 8}, {110, 110, 93}, {111, 122, 8}, },
            {{65, 90, 8}, {97, 99, 8}, {100, 100, 94}, {101, 122, 8}, },
            {{65, 90, 8}, {97, 107, 8}, {108, 108, 95}, {109, 109, 8}, {110, 110, 96}, {111, 122, 8}, },
            {{65, 90, 8}, {97, 104, 8}, {105, 105, 97}, {106, 122, 8}, },
            {{65, 90, 8}, {97, 115, 8}, {116, 116, 98}, {117, 122, 8}, },
            {{65, 109, -13}, {110, 110, 99}, {111, 122, 8}, },
            {{167, 167, 100}, },
            {{65, 90, 8}, {97, 117, 8}, {118, 118, 101}, {119, 122, 8}, },
            {{167, 167, 102}, },
            {{65, 115, -46}, {116, 116, 103}, {117, 122, 8}, },
            {{65, 90, 8}, {97, 108, 8}, {109, 109, 104}, {110, 122, 8}, },
            {{65, 90, 8}, {97, 111, 8}, {112, 112, 105}, {113, 122, 8}, },
            {{65, 109, -13}, {110, 110, 106}, {111, 122, 8}, },
            {{65, 113, -34}, {114, 114, 107}, {115, 122, 8}, },
            {{65, 122, -10}, },
            {{65, 122, -10}, },
            {{65, 90, 8}, {97, 98, 8}, {99, 99, 108}, {100, 122, 8}, },
            {{65, 100, -11}, {101, 101, 109}, {102, 122, 8}, },
            {{65, 122, -10}, },
            {{65, 113, -34}, {114, 114, 110}, {115, 122, 8}, },
            {{65, 102, -35}, {103, 103, 111}, {104, 122, 8}, },
            {{65, 121, -36}, {122, 122, 112}, },
            {{65, 100, -11}, {101, 101, 113}, {102, 122, 8}, },
            {{65, 109, -13}, {110, 110, 114}, {111, 122, 8}, },
            {{65, 97, -9}, {98, 98, 115}, {99, 122, 8}, },
            {{65, 100, -11}, {101, 101, 116}, {102, 122, 8}, },
            {{65, 122, -10}, },
            {{65, 103, -19}, {104, 104, 117}, {105, 109, 8}, {110, 110, 118}, {111, 122, 8}, },
            {{65, 99, -43}, {100, 100, 119}, {101, 122, 8}, },
            {{65, 107, -44}, {108, 108, 120}, {109, 109, 8}, {110, 110, 121}, {111, 122, 8}, },
            {{65, 104, -45}, {105, 105, 122}, {106, 122, 8}, },
            {{65, 115, -46}, {116, 116, 123}, {117, 122, 8}, },
            {{65, 109, -13}, {110, 110, 124}, {111, 122, 8}, },
            {{167, 167, 125}, },
            {{65, 117, -49}, {118, 118, 126}, {119, 122, 8}, },
            {{167, 167, 127}, },
            {{65, 115, -46}, {116, 116, 128}, {117, 122, 8}, },
            {{65, 108, -52}, {109, 109, 129}, {110, 122, 8}, },
            {{65, 111, -53}, {112, 112, 130}, {113, 122, 8}, },
            {{65, 109, -13}, {110, 110, 131}, {111, 122, 8}, },
            {{65, 113, -34}, {114, 114, 132}, {115, 122, 8}, },
            {{65, 122, -10}, },
            {{65, 122, -10}, },
            {{65, 98, -58}, {99, 99, 133}, {100, 122, 8}, },
            {{65, 109, -13}, {110, 110, 134}, {111, 122, 8}, },
            {{65, 104, -45}, {105, 105, 135}, {106, 122, 8}, },
            {{65, 90, 8}, {97, 116, 8}, {117, 117, 136}, {118, 122, 8}, },
            {{65, 100, -11}, {101, 101, 137}, {102, 122, 8}, },
            {{65, 109, -13}, {110, 110, 138}, {111, 122, 8}, },
            {{65, 109, -13}, {110, 110, 139}, {111, 122, 8}, },
            {{65, 113, -34}, {114, 114, 140}, {115, 122, 8}, },
            {{65, 104, -45}, {105, 105, 141}, {106, 122, 8}, },
            {{65, 113, -34}, {114, 114, 142}, {115, 122, 8}, },
            {{65, 116, -88}, {117, 117, 143}, {118, 122, 8}, },
            {{65, 100, -11}, {101, 101, 144}, {102, 122, 8}, },
            {{65, 104, -45}, {105, 105, 145}, {106, 122, 8}, },
            {{65, 104, -45}, {105, 105, 146}, {106, 122, 8}, },
            {{65, 122, -10}, },
            {{65, 115, -46}, {116, 116, 147}, {117, 122, 8}, },
            {{65, 90, 8}, {97, 97, 148}, {98, 115, 8}, {116, 116, 149}, {117, 122, 8}, },
            {{114, 114, 150}, },
            {{65, 100, -11}, {101, 101, 151}, {102, 122, 8}, },
            {{99, 99, 152}, },
            {{65, 110, -16}, {111, 111, 153}, {112, 122, 8}, },
            {{65, 90, 8}, {97, 114, 8}, {115, 115, 154}, {116, 122, 8}, },
            {{65, 115, -46}, {116, 116, 155}, {117, 122, 8}, },
            {{65, 109, -13}, {110, 110, 156}, {111, 122, 8}, },
            {{65, 122, -10}, },
            {{65, 103, -19}, {104, 104, 157}, {105, 122, 8}, },
            {{65, 109, -13}, {110, 110, 158}, {111, 122, 8}, },
            {{65, 104, -45}, {105, 105, 159}, {106, 122, 8}, },
            {{65, 116, -88}, {117, 117, 160}, {118, 122, 8}, },
            {{65, 100, -11}, {101, 101, 161}, {102, 122, 8}, },
            {{65, 109, -13}, {110, 110, 162}, {111, 122, 8}, },
            {{65, 109, -13}, {110, 110, 163}, {111, 122, 8}, },
            {{65, 113, -34}, {114, 114, 164}, {115, 122, 8}, },
            {{65, 104, -45}, {105, 105, 165}, {106, 122, 8}, },
            {{65, 113, -34}, {114, 114, 166}, {115, 122, 8}, },
            {{65, 116, -88}, {117, 117, 167}, {118, 122, 8}, },
            {{65, 100, -11}, {101, 101, 168}, {102, 122, 8}, },
            {{65, 104, -45}, {105, 105, 169}, {106, 122, 8}, },
            {{65, 104, -45}, {105, 105, 170}, {106, 122, 8}, },
            {{65, 122, -10}, },
            {{65, 115, -46}, {116, 116, 171}, {117, 122, 8}, },
            {{65, 90, 8}, {97, 97, 172}, {98, 115, 8}, {116, 116, 173}, {117, 122, 8}, },
            {{114, 114, 174}, },
            {{65, 100, -11}, {101, 101, 175}, {102, 122, 8}, },
            {{99, 99, 176}, },
            {{65, 110, -16}, {111, 111, 177}, {112, 122, 8}, },
            {{65, 114, -106}, {115, 115, 178}, {116, 122, 8}, },
            {{65, 115, -46}, {116, 116, 179}, {117, 122, 8}, },
            {{65, 109, -13}, {110, 110, 180}, {111, 122, 8}, },
            {{65, 122, -10}, },
            {{65, 103, -19}, {104, 104, 181}, {105, 122, 8}, },
            {{65, 99, -43}, {100, 100, 182}, {101, 122, 8}, },
            {{65, 107, -44}, {108, 108, 183}, {109, 122, 8}, },
            {{65, 114, -106}, {115, 115, 184}, {116, 122, 8}, },
            {{65, 108, -52}, {109, 109, 185}, {110, 122, 8}, },
            {{65, 114, -106}, {115, 115, 186}, {116, 122, 8}, },
            {{65, 100, -11}, {101, 101, 187}, {102, 122, 8}, },
            {{65, 116, -88}, {117, 117, 188}, {118, 122, 8}, },
            {{65, 115, -46}, {116, 116, 189}, {117, 122, 8}, },
            {{65, 122, -10}, },
            {{65, 90, 8}, {97, 97, 190}, {98, 122, 8}, },
            {{65, 109, -13}, {110, 110, 191}, {111, 113, 8}, {114, 114, 192}, {115, 115, 193}, {116, 122, 8}, },
            {{65, 122, -10}, },
            {{65, 122, -10}, },
            {{65, 90, 8}, {97, 118, 8}, {119, 119, 194}, {120, 122, 8}, },
            {{65, 115, -46}, {116, 116, 195}, {117, 122, 8}, },
            {{65, 90, 8}, {97, 97, 196}, {98, 122, 8}, },
            {{122, 122, 197}, },
            {{65, 108, -52}, {109, 109, 198}, {110, 122, 8}, },
            {{104, 104, 199}, },
            {{65, 97, -9}, {98, 98, 200}, {99, 122, 8}, },
            {{65, 115, -46}, {116, 116, 201}, {117, 122, 8}, },
            {{65, 100, -11}, {101, 101, 202}, {102, 122, 8}, },
            {{65, 115, -46}, {116, 116, 203}, {117, 122, 8}, },
            {{65, 100, -11}, {101, 101, 204}, {102, 122, 8}, },
            {{65, 99, -43}, {100, 100, 205}, {101, 122, 8}, },
            {{65, 107, -44}, {108, 108, 206}, {109, 122, 8}, },
            {{65, 114, -106}, {115, 115, 207}, {116, 122, 8}, },
            {{65, 108, -52}, {109, 109, 208}, {110, 122, 8}, },
            {{65, 114, -106}, {115, 115, 209}, {116, 122, 8}, },
            {{65, 100, -11}, {101, 101, 210}, {102, 122, 8}, },
            {{65, 116, -88}, {117, 117, 211}, {118, 122, 8}, },
            {{65, 115, -46}, {116, 116, 212}, {117, 122, 8}, },
            {{65, 122, -10}, },
            {{65, 90, 8}, {97, 97, 213}, {98, 122, 8}, },
            {{65, 109, -13}, {110, 110, 214}, {111, 113, 8}, {114, 114, 215}, {115, 115, 216}, {116, 122, 8}, },
            {{65, 122, -10}, },
            {{65, 122, -10}, },
            {{65, 118, -149}, {119, 119, 217}, {120, 122, 8}, },
            {{65, 115, -46}, {116, 116, 218}, {117, 122, 8}, },
            {{65, 90, 8}, {97, 97, 219}, {98, 122, 8}, },
            {{122, 122, 220}, },
            {{65, 108, -52}, {109, 109, 221}, {110, 122, 8}, },
            {{104, 104, 222}, },
            {{65, 97, -9}, {98, 98, 223}, {99, 122, 8}, },
            {{65, 115, -46}, {116, 116, 224}, {117, 122, 8}, },
            {{65, 100, -11}, {101, 101, 225}, {102, 122, 8}, },
            {{65, 115, -46}, {116, 116, 226}, {117, 122, 8}, },
            {{65, 100, -11}, {101, 101, 227}, {102, 122, 8}, },
            {{65, 114, -106}, {115, 115, 228}, {116, 122, 8}, },
            {{65, 122, -10}, },
            {{65, 115, -46}, {116, 116, 229}, {117, 122, 8}, },
            {{65, 97, -9}, {98, 98, 230}, {99, 122, 8}, },
            {{65, 115, -46}, {116, 116, 231}, {117, 122, 8}, },
            {{65, 113, -34}, {114, 114, 232}, {115, 122, 8}, },
            {{65, 90, 8}, {97, 97, 233}, {98, 122, 8}, },
            {{65, 90, 8}, {97, 97, 234}, {98, 122, 8}, },
            {{65, 113, -34}, {114, 114, 235}, {115, 122, 8}, },
            {{65, 122, -10}, },
            {{65, 122, -10}, },
            {{65, 122, -10}, },
            {{65, 110, -16}, {111, 111, 236}, {112, 122, 8}, },
            {{65, 122, -10}, },
            {{65, 102, -35}, {103, 103, 237}, {104, 122, 8}, },
            {},
            {{65, 97, -9}, {98, 98, 238}, {99, 122, 8}, },
            {{115, 115, 239}, },
            {{65, 100, -11}, {101, 101, 240}, {102, 122, 8}, },
            {{65, 90, 8}, {97, 97, 241}, {98, 122, 8}, },
            {{65, 108, -52}, {109, 109, 242}, {110, 122, 8}, },
            {{65, 90, 8}, {97, 97, 243}, {98, 122, 8}, },
            {{65, 109, -13}, {110, 110, 244}, {111, 122, 8}, },
            {{65, 114, -106}, {115, 115, 245}, {116, 122, 8}, },
            {{65, 122, -10}, },
            {{65, 115, -46}, {116, 116, 246}, {117, 122, 8}, },
            {{65, 97, -9}, {98, 98, 247}, {99, 122, 8}, },
            {{65, 115, -46}, {116, 116, 248}, {117, 122, 8}, },
            {{65, 113, -34}, {114, 114, 249}, {115, 122, 8}, },
            {{65, 90, 8}, {97, 97, 250}, {98, 122, 8}, },
            {{65, 90, 8}, {97, 97, 251}, {98, 122, 8}, },
            {{65, 113, -34}, {114, 114, 252}, {115, 122, 8}, },
            {{65, 122, -10}, },
            {{65, 122, -10}, },
            {{65, 122, -10}, },
            {{65, 110, -16}, {111, 111, 253}, {112, 122, 8}, },
            {{65, 122, -10}, },
            {{65, 102, -35}, {103, 103, 254}, {104, 122, 8}, },
            {},
            {{65, 97, -9}, {98, 98, 255}, {99, 122, 8}, },
            {{115, 115, 256}, },
            {{65, 100, -11}, {101, 101, 257}, {102, 122, 8}, },
            {{65, 90, 8}, {97, 97, 258}, {98, 122, 8}, },
            {{65, 108, -52}, {109, 109, 259}, {110, 122, 8}, },
            {{65, 90, 8}, {97, 97, 260}, {98, 122, 8}, },
            {{65, 109, -13}, {110, 110, 261}, {111, 122, 8}, },
            {{65, 122, -10}, },
            {{65, 122, -10}, },
            {{65, 100, -11}, {101, 101, 262}, {102, 122, 8}, },
            {{65, 90, 8}, {97, 97, 263}, {98, 122, 8}, },
            {{65, 114, -106}, {115, 115, 264}, {116, 122, 8}, },
            {{65, 113, -34}, {114, 114, 265}, {115, 122, 8}, },
            {{65, 102, -35}, {103, 103, 266}, {104, 122, 8}, },
            {{65, 122, -10}, },
            {{65, 98, -58}, {99, 99, 267}, {100, 122, 8}, },
            {{65, 122, -10}, },
            {{65, 100, -11}, {101, 101, 268}, {102, 122, 8}, },
            {{116, 116, 269}, },
            {{65, 113, -34}, {114, 114, 270}, {115, 122, 8}, },
            {{65, 102, -35}, {103, 103, 271}, {104, 122, 8}, },
            {{65, 97, -9}, {98, 98, 272}, {99, 122, 8}, },
            {{65, 102, -35}, {103, 103, 273}, {104, 122, 8}, },
            {{65, 100, -11}, {101, 101, 274}, {102, 122, 8}, },
            {{65, 122, -10}, },
            {{65, 122, -10}, },
            {{65, 100, -11}, {101, 101, 275}, {102, 122, 8}, },
            {{65, 90, 8}, {97, 97, 276}, {98, 122, 8}, },
            {{65, 114, -106}, {115, 115, 277}, {116, 122, 8}, },
            {{65, 113, -34}, {114, 114, 278}, {115, 122, 8}, },
            {{65, 102, -35}, {103, 103, 279}, {104, 122, 8}, },
            {{65, 122, -10}, },
            {{65, 98, -58}, {99, 99, 280}, {100, 122, 8}, },
            {{65, 122, -10}, },
            {{65, 100, -11}, {101, 101, 281}, {102, 122, 8}, },
            {{116, 116, 282}, },
            {{65, 113, -34}, {114, 114, 283}, {115, 122, 8}, },
            {{65, 102, -35}, {103, 103, 284}, {104, 122, 8}, },
            {{65, 97, -9}, {98, 98, 285}, {99, 122, 8}, },
            {{65, 102, -35}, {103, 103, 286}, {104, 122, 8}, },
            {{65, 100, -11}, {101, 101, 287}, {102, 122, 8}, },
            {{65, 113, -34}, {114, 114, 288}, {115, 122, 8}, },
            {{65, 102, -35}, {103, 103, 289}, {104, 122, 8}, },
            {{65, 115, -46}, {116, 116, 290}, {117, 122, 8}, },
            {{65, 122, -10}, },
            {{65, 122, -10}, },
            {{65, 103, -19}, {104, 104, 291}, {105, 122, 8}, },
            {{65, 113, -34}, {114, 114, 292}, {115, 122, 8}, },
            {{101, 101, 293}, },
            {{65, 122, -10}, },
            {{65, 122, -10}, },
            {{65, 100, -11}, {101, 101, 294}, {102, 122, 8}, },
            {{65, 122, -10}, },
            {{65, 109, -13}, {110, 110, 295}, {111, 122, 8}, },
            {{65, 113, -34}, {114, 114, 296}, {115, 122, 8}, },
            {{65, 102, -35}, {103, 103, 297}, {104, 122, 8}, },
            {{65, 115, -46}, {116, 116, 298}, {117, 122, 8}, },
            {{65, 122, -10}, },
            {{65, 122, -10}, },
            {{65, 103, -19}, {104, 104, 299}, {105, 122, 8}, },
            {{65, 113, -34}, {114, 114, 300}, {115, 122, 8}, },
            {{101, 101, 301}, },
            {{65, 122, -10}, },
            {{65, 122, -10}, },
            {{65, 100, -11}, {101, 101, 302}, {102, 122, 8}, },
            {{65, 122, -10}, },
            {{65, 109, -13}, {110, 110, 303}, {111, 122, 8}, },
            {{65, 122, -10}, },
            {{65, 122, -10}, },
            {{65, 90, 8}, {97, 97, 304}, {98, 122, 8}, },
            {{65, 122, -10}, },
            {{65, 122, -10}, },
            {{110, 110, 305}, {115, 115, 306}, },
            {{65, 113, -34}, {114, 114, 307}, {115, 122, 8}, },
            {{65, 99, -43}, {100, 100, 308}, {101, 122, 8}, },
            {{65, 122, -10}, },
            {{65, 122, -10}, },
            {{65, 90, 8}, {97, 97, 309}, {98, 122, 8}, },
            {{65, 122, -10}, },
            {{65, 122, -10}, },
            {{110, 110, 310}, {115, 115, 311}, },
            {{65, 113, -34}, {114, 114, 312}, {115, 122, 8}, },
            {{65, 99, -43}, {100, 100, 313}, {101, 122, 8}, },
            {{65, 102, -35}, {103, 103, 314}, {104, 122, 8}, },
            {},
            {},
            {{65, 122, -10}, },
            {{65, 100, -11}, {101, 101, 315}, {102, 122, 8}, },
            {{65, 102, -35}, {103, 103, 316}, {104, 122, 8}, },
            {},
            {},
            {{65, 122, -10}, },
            {{65, 100, -11}, {101, 101, 317}, {102, 122, 8}, },
            {{65, 122, -10}, },
            {{65, 122, -10}, },
            {{65, 122, -10}, },
            {{65, 122, -10}, },
        }
    };*/

    private static int[][] accept;
/*  {
        // INITIAL
        {-1, 32, 32, 32, 26, 34, 27, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 28, 33, 33, 33, 2, 4, 33, 5, 29, 33, 33, 33, 33, 3, 1, -1, 33, -1, 33, 6, 33, 7, 33, 9, 9, 33, 33, 28, 33, 33, 33, 2, 4, 33, 5, 29, 33, 33, 33, 33, 3, 1, -1, 33, -1, 33, 6, 33, 7, 33, 30, 9, 33, 33, 33, 21, 25, 33, 33, 15, 33, 33, 14, 33, 33, 33, 18, 33, 33, -1, 24, -1, 23, 33, 22, 33, 31, 33, 33, 33, 21, 25, 33, 33, 15, 33, 33, 14, 33, 33, 33, 18, 33, 33, -1, 24, -1, 23, 33, 22, 33, 31, 33, 33, 33, 33, 33, 33, 33, 33, 33, 12, 33, 33, 20, 19, 33, 33, 33, -1, 33, -1, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 12, 33, 33, 20, 19, 33, 33, 33, -1, 33, -1, 33, 33, 33, 33, 33, 8, 17, 33, 33, 33, 33, 33, 33, 33, 13, 13, 13, 33, 11, 33, 16, 33, -1, 33, 33, 33, 33, 10, 8, 17, 33, 33, 33, 33, 33, 33, 33, 13, 13, 13, 33, 11, 33, 16, 33, -1, 33, 33, 33, 33, 10, 8, 21, 33, 33, 33, 33, 33, 14, 33, 1, 33, -1, 33, 33, 33, 33, 33, 8, 21, 33, 33, 33, 33, 33, 14, 33, 1, 33, -1, 33, 33, 33, 33, 33, 33, 33, 33, 15, 5, 33, 33, -1, 23, 6, 33, 7, 33, 33, 33, 33, 15, 5, 33, 33, -1, 23, 6, 33, 7, 33, 25, 2, 33, 3, 24, 0, 33, 33, 25, 2, 33, 3, 24, 0, 33, 33, 33, 0, 0, 22, 33, 33, 0, 0, 22, 33, 4, 9, 4, 9, },

    };*/

    public static class State
    {
        public final static State INITIAL = new State(0);

        private int id;

        private State(@SuppressWarnings("hiding") int id)
        {
            this.id = id;
        }

        public int id()
        {
            return this.id;
        }
    }

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Lexer.class.getResourceAsStream("lexer.dat")));

            // read gotoTable
            int length = s.readInt();
            gotoTable = new int[length][][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][][];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                    length = s.readInt();
                    gotoTable[i][j] = new int[length][3];
                    for(int k = 0; k < gotoTable[i][j].length; k++)
                    {
                        for(int l = 0; l < 3; l++)
                        {
                            gotoTable[i][j][k][l] = s.readInt();
                        }
                    }
                }
            }

            // read accept
            length = s.readInt();
            accept = new int[length][];
            for(int i = 0; i < accept.length; i++)
            {
                length = s.readInt();
                accept[i] = new int[length];
                for(int j = 0; j < accept[i].length; j++)
                {
                    accept[i][j] = s.readInt();
                }
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
        }
    }
}
