/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.platzhaltr.util.date.node;

import com.platzhaltr.util.date.analysis.*;

@SuppressWarnings("nls")
public final class AAbsoluteTime extends PTime
{
    private TNumber _hour_;
    private TNumber _minute_;

    public AAbsoluteTime()
    {
        // Constructor
    }

    public AAbsoluteTime(
        @SuppressWarnings("hiding") TNumber _hour_,
        @SuppressWarnings("hiding") TNumber _minute_)
    {
        // Constructor
        setHour(_hour_);

        setMinute(_minute_);

    }

    @Override
    public Object clone()
    {
        return new AAbsoluteTime(
            cloneNode(this._hour_),
            cloneNode(this._minute_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAbsoluteTime(this);
    }

    public TNumber getHour()
    {
        return this._hour_;
    }

    public void setHour(TNumber node)
    {
        if(this._hour_ != null)
        {
            this._hour_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._hour_ = node;
    }

    public TNumber getMinute()
    {
        return this._minute_;
    }

    public void setMinute(TNumber node)
    {
        if(this._minute_ != null)
        {
            this._minute_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._minute_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._hour_)
            + toString(this._minute_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._hour_ == child)
        {
            this._hour_ = null;
            return;
        }

        if(this._minute_ == child)
        {
            this._minute_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._hour_ == oldChild)
        {
            setHour((TNumber) newChild);
            return;
        }

        if(this._minute_ == oldChild)
        {
            setMinute((TNumber) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
