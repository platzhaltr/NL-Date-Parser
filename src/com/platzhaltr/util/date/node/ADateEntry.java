/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.platzhaltr.util.date.node;

import com.platzhaltr.util.date.analysis.*;

@SuppressWarnings("nls")
public final class ADateEntry extends PEntry
{
    private PDate _date_;
    private PTime _time_;

    public ADateEntry()
    {
        // Constructor
    }

    public ADateEntry(
        @SuppressWarnings("hiding") PDate _date_,
        @SuppressWarnings("hiding") PTime _time_)
    {
        // Constructor
        setDate(_date_);

        setTime(_time_);

    }

    @Override
    public Object clone()
    {
        return new ADateEntry(
            cloneNode(this._date_),
            cloneNode(this._time_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADateEntry(this);
    }

    public PDate getDate()
    {
        return this._date_;
    }

    public void setDate(PDate node)
    {
        if(this._date_ != null)
        {
            this._date_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._date_ = node;
    }

    public PTime getTime()
    {
        return this._time_;
    }

    public void setTime(PTime node)
    {
        if(this._time_ != null)
        {
            this._time_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._time_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._date_)
            + toString(this._time_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._date_ == child)
        {
            this._date_ = null;
            return;
        }

        if(this._time_ == child)
        {
            this._time_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._date_ == oldChild)
        {
            setDate((PDate) newChild);
            return;
        }

        if(this._time_ == oldChild)
        {
            setTime((PTime) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
